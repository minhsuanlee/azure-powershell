
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets the details of a replication policy.
.Description
Gets the details of a replication policy.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api202301.IPolicy
Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20210216Preview.IPolicyModel
.Link
https://learn.microsoft.com/powershell/module/az.migrate/get-azmigratereplicationpolicytoazuremigrate
#>
function Get-AzMigrateReplicationPolicy {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20210216Preview.IPolicyModel], ParameterSetName = "AzStackHCI")]
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api202301.IPolicy], ParameterSetName = "agentlessVMware")]
    [CmdletBinding(DefaultParameterSetName = 'List', PositionalBinding = $false)]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # The name of the resource group where the recovery services vault is present.
        ${ResourceGroupName},
    
        [Parameter(Mandatory)]
        [Alias('VaultName')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # The name of the recovery services vault.
        ${ResourceName},
    
        [Parameter(ParameterSetName = 'Get', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # Replication policy name.
        ${PolicyName},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String[]]
        # Azure Subscription Id in which migrate project was created.
        ${SubscriptionId},

        [Parameter()]
        [ValidateSet("agentlessVMware", "AzStackHCI")]
        [ArgumentCompleter( { "agentlessVMware", "AzStackHCI" })]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # Specifies the server migration scenario.
        ${Scenario},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )
    
    process {
        # Honor -Scenario if it is provided.
        if ($PSBoundParameters.ContainsKey('Scenario')) {
            if ($Scenario -eq "agentlessVMware") {
                $scenario = "agentlessVMware"
            }
            else {
                # AzStackHCI
                $scenario = $AzStackHCIInstanceTypes.AzStackHCI
            }
        }
        else {
            # Get Scenario global variable
            $scenarioObject = Get-Variable `
                -Name $AzStackHCIGlobalVariableNames.Scenario `
                -ErrorVariable notPresent `
                -ErrorAction SilentlyContinue
            if ($null -eq $scenarioObject) {
                # Default to agentlessVMware
                $scenario = "agentlessVMware"
            }
            else {
                $scenario = $scenarioObject.Value
                if ($scenario -ne $AzStackHCIInstanceTypes.AzStackHCI) {
                    throw "Unknown Scenario '$($scenario)' is set. Please set -Scenario to 'agentlessVMware' or 'AzStackHCI'."
                }
            }
        }

        # Remove common optional parameter -Scenario
        $null = $PSBoundParameters.Remove('Scenario')

        if ($scenario -eq "agentlessVMware") {
            $null = $PSBoundParameters.Remove('VaultName')

            return Az.Migrate.Internal\Get-AzMigrateReplicationPolicyToAzureMigrate @PSBoundParameters
        }
        else {
            $null = $PSBoundParameters.Remove('ResourceName')
            $null = $PSBoundParameters.Add('VaultName', $ResourceName)
            
            return Get-AzMigratePolicy @PSBoundParameters
        }
    }
}
    