
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets the details of an Azure Site Recovery fabric.
.Description
Gets the details of an Azure Site Recovery fabric.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api202301.IFabric
Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20210216Preview.IFabricModel
.Link
https://learn.microsoft.com/powershell/module/az.migrate/get-azmigratereplicationfabric
#>
function Get-AzMigrateReplicationFabric {
    [OutputType(
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20210216Preview.IFabricModel],
        ParameterSetName = ('GetAzStackHCI', 'ListAzStackHCI'))]
    [OutputType(
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api202301.IFabric],
        ParameterSetName = ('GetAgentlessVMware', 'ListAgentlessVMware'))]
    [CmdletBinding(DefaultParameterSetName = 'ListAzStackHCI', PositionalBinding = $false)]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # The name of the resource group where the recovery services vault is present.
        ${ResourceGroupName},
    
        [Parameter(ParameterSetName = 'GetAgentlessVMware', Mandatory)]
        [Parameter(ParameterSetName = 'ListAgentlessVMware', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # The name of the recovery services vault.
        ${ResourceName},
    
        [Parameter(ParameterSetName = 'GetAzStackHCI', Mandatory)]
        [Parameter(ParameterSetName = 'GetAgentlessVMware', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # Fabric name.
        ${FabricName},
    
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String[]]
        # Azure Subscription Id in which migrate project was created.
        ${SubscriptionId},

        [Parameter()]
        [ValidateSet("agentlessVMware", "AzStackHCI")]
        [ArgumentCompleter( { "agentlessVMware", "AzStackHCI" })]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Path')]
        [System.String]
        # Specifies the server migration scenario. Highly recommended to include for 'AzStackHCI' scenario.
        ${Scenario},
    
        [Parameter(ParameterSetName = 'GetAgentlessVMware')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Query')]
        [System.String]
        # OData filter options.
        ${Filter},
    
        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},
    
        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},
    
        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )
    
    process {
        $parameterSet = $PSCmdlet.ParameterSetName
        
        if ($PSBoundParameters.ContainsKey('Scenario'))
        {
            # Remove common optional parameter -Scenario
            $null = $PSBoundParameters.Remove('Scenario')
        }
        elseif ($PSDefaultParameterValues.ContainsKey('InitializeReplicationInfrastructure:Sceanrio')){
            $Scenario = $PSDefaultParameterValues['InitializeReplicationInfrastructure:Sceanrio']
        }

        if ([string]::IsNullOrEmpty($Scenario) -or ($Scenario -eq $AzMigrateSupportedScenarios.agentlessVMware)) {
            # 'agenlessVMware' scenario for migrating to Azure
            if ($parameterSet -match $AzMigrateSupportedScenarios.AzStackHCI) {
                throw "Provided parameters cannot be used in the scenario '$($Scenario)'. Please check out examples for this command for correct usage and try again."
            }

            return Az.Migrate.Internal\Get-AzMigrateReplicationFabricToAzureMigrate @PSBoundParameters
        }
        elseif ($Scenario -eq $AzMigrateSupportedScenarios.AzStackHCI) {
            # 'AzStackHCI' scenario for migrating to AzStackHCI
            if ($parameterSet -match $AzMigrateSupportedScenarios.agentlessVMware) {
                throw "Provided parameters cannot be used in the scenario '$($Scenario)'. Please check out examples for this command for correct usage and try again."
            }

            $null = $PSBoundParameters.Remove('ResourceName')
            $null = $PSBoundParameters.Remove('Filter')

            return Get-AzMigrateFabric @PSBoundParameters
        }
        else {
            throw "Unknown Scenario '$($Scenario)' is set. Please set -Scenario to 'agentlessVMware' or 'AzStackHCI'."
        }
    }
}
    